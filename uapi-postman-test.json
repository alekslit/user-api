{
	"info": {
		"_postman_id": "496b0cfe-f9ee-4b7d-8b85-ecfbaf812530",
		"name": "User API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30802125"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Сохраняем пользователя (firstName is blank)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"\",\r\n  \"email\": \"ivan@mail.ru\",\r\n  \"password\": \"g32jhg4jh23\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем пользователя (firstName.lenght == 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, firstName, email, registrationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('firstName');\r",
									"pm.expect(target).to.have.property('email');\r",
									"pm.expect(target).to.have.property('registrationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.email).equal(target.email, 'Email пользователя должен соответствовать Email пользователя в запросе');\r",
									"    pm.expect(source.firstName).equal(target.firstName, 'Имя пользователя должно соответствовать имени пользователя в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Ив\",\r\n  \"email\": \"ivan1@mail.ru\",\r\n  \"password\": \"g32jhg4jh23\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем пользователя (firstName.lenght == 50)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, firstName, email, registrationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('firstName');\r",
									"pm.expect(target).to.have.property('email');\r",
									"pm.expect(target).to.have.property('registrationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.email).equal(target.email, 'Email пользователя должен соответствовать Email пользователя в запросе');\r",
									"    pm.expect(source.firstName).equal(target.firstName, 'Имя пользователя должно соответствовать имени пользователя в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"12345678901234567890123456789012345678901234567890\",\r\n  \"email\": \"ivan2@mail.ru\",\r\n  \"password\": \"g32jhg4jh23\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем пользователя (firstName.lenght == 51)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"123456789012345678901234567890123456789012345678901\",\r\n  \"email\": \"ivan3@mail.ru\",\r\n  \"password\": \"g32jhg4jh23\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем пользователя (email is bad)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Иван\",\r\n  \"email\": \"ivan4mail.ru\",\r\n  \"password\": \"g32jhg4jh23\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем пользователя (duplicate email)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Виктор\",\r\n  \"email\": \"ivan1@mail.ru\",\r\n  \"password\": \"g32jhg4jh23\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновляем данные пользователя (birthday is Future)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJpdmFuMUBtYWlsLnJ1IiwiZXhwIjoxNzMwNDUwMTQ5LCJyb2xlcyI6WyJVU0VSIl0sImlkIjoyfQ.G1He00BjX89KQGOFcTR9EvUOBN1xqaD6vA_ARRcDbqtLd9pSIBjpcI5BQ9FBNGZ-X1xj8yaKfwAENaRBoiUX-A",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Иван\",\r\n  \"lastName\": \"Иванов\",\r\n  \"patronymic\": \"Иванович\",\r\n  \"birthday\": \"2100-03-27\",\r\n  \"email\": \"ivan1@mail.ru\",\r\n  \"phone\": \"88005555535\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/profile/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновляем данные пользователя (birthday is PastOrPresent)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, firstName, lastName, patronymic, birthday, email, phone\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('firstName');\r",
									"pm.expect(target).to.have.property('lastName');\r",
									"pm.expect(target).to.have.property('patronymic');\r",
									"pm.expect(target).to.have.property('birthday');\r",
									"pm.expect(target).to.have.property('email');\r",
									"pm.expect(target).to.have.property('phone');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.firstName).equal(target.firstName, 'Имя пользователя должно соответствовать имени пользователя в запросе');\r",
									"    pm.expect(source.lastName).equal(target.lastName, 'Фамилия пользователя должна соответствовать фамилии пользователя в запросе');\r",
									"    pm.expect(source.patronymic).equal(target.patronymic, 'Отчество пользователя должно соответствовать отчеству пользователя в запросе');\r",
									"    pm.expect(source.birthday).equal(target.birthday, 'Дата рождения пользователя должна соответствовать дате рожждения пользователя в запросе');\r",
									"    pm.expect(source.email).equal(target.email, 'Email пользователя должен соответствовать Email пользователя в запросе');\r",
									"    pm.expect(source.firstName).equal(target.firstName, 'Имя пользователя должно соответствовать имени пользователя в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJpdmFuMUBtYWlsLnJ1IiwiZXhwIjoxNzMwNDUwMTQ5LCJyb2xlcyI6WyJVU0VSIl0sImlkIjoyfQ.G1He00BjX89KQGOFcTR9EvUOBN1xqaD6vA_ARRcDbqtLd9pSIBjpcI5BQ9FBNGZ-X1xj8yaKfwAENaRBoiUX-A",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Иван\",\r\n  \"lastName\": \"Иванов\",\r\n  \"patronymic\": \"Иванович\",\r\n  \"birthday\": \"2024-10-02\",\r\n  \"email\": \"ivan1@mail.ru\",\r\n  \"phone\": \"88005555535\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/profile/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновляем данные пользователя (token is bad)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
									"    pm.response.to.be.forbidden;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUfxMiJ9.eyJzdWIiOiJpdmFuMUBtYWlsLnJ1IiwiZXhwIjoxNzMwNDUwMTQ5LCJyb2xlcyI6WyJVU0VSIl0sImlkIjoyfQ.G1He00BjX89KQGOFcTR9EvUOBN1xqaD6vA_ARRcDbqtLd9pSIBjpcI5BQ9FBNGZ-X1xj8yaKfwAENaRBoiUX-A",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Иван\",\r\n  \"lastName\": \"Иванов\",\r\n  \"patronymic\": \"Иванович\",\r\n  \"birthday\": \"2024-10-02\",\r\n  \"email\": \"ivan1@mail.ru\",\r\n  \"phone\": \"88005555535\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/profile/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновляем данные пользователя (no token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
									"    pm.response.to.be.forbidden;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Иван\",\r\n  \"lastName\": \"Иванов\",\r\n  \"patronymic\": \"Иванович\",\r\n  \"birthday\": \"2024-10-02\",\r\n  \"email\": \"ivan1@mail.ru\",\r\n  \"phone\": \"88005555535\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/profile/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список пользователей (from = -1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?from=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "firstName",
									"value": "",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "",
									"disabled": true
								},
								{
									"key": "patronymic",
									"value": "",
									"disabled": true
								},
								{
									"key": "yearOfBirth",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список пользователей (size = 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?size=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "firstName",
									"value": "",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "",
									"disabled": true
								},
								{
									"key": "patronymic",
									"value": "",
									"disabled": true
								},
								{
									"key": "yearOfBirth",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "-1",
									"disabled": true
								},
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список пользователей (без фильтров)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, firstName, lastName, patronymic, birthday, email, phone\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('firstName');\r",
									"pm.expect(target[0]).to.have.property('lastName');\r",
									"pm.expect(target[0]).to.have.property('patronymic');\r",
									"pm.expect(target[0]).to.have.property('birthday');\r",
									"pm.expect(target[0]).to.have.property('email');\r",
									"pm.expect(target[0]).to.have.property('phone');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено 3 комментария.\", function () {\r",
									"    pm.expect(target.length).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "firstName",
									"value": "",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "",
									"disabled": true
								},
								{
									"key": "patronymic",
									"value": "",
									"disabled": true
								},
								{
									"key": "yearOfBirth",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "",
									"disabled": true
								},
								{
									"key": "size",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список пользователей (часть фильтров)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, firstName, lastName, patronymic, birthday, email, phone\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('firstName');\r",
									"pm.expect(target[0]).to.have.property('lastName');\r",
									"pm.expect(target[0]).to.have.property('patronymic');\r",
									"pm.expect(target[0]).to.have.property('birthday');\r",
									"pm.expect(target[0]).to.have.property('email');\r",
									"pm.expect(target[0]).to.have.property('phone');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено 3 комментария.\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?lastName=ва&patronymic=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "firstName",
									"value": "",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "ва"
								},
								{
									"key": "patronymic",
									"value": ""
								},
								{
									"key": "yearOfBirth",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "",
									"disabled": true
								},
								{
									"key": "size",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список пользователей (все фильтры)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должны получить пустой список.\", function () {\r",
									"    pm.expect(target.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?firstName=ad&lastName=ва&patronymic=иван&yearOfBirth=2024&from=0&size=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "firstName",
									"value": "ad"
								},
								{
									"key": "lastName",
									"value": "ва"
								},
								{
									"key": "patronymic",
									"value": "иван"
								},
								{
									"key": "yearOfBirth",
									"value": "2024"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить пользователя по id (id == -1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/profile/-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить пользователя по id (id == 999999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/profile/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить пользователя по id (id == 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, firstName, lastName, patronymic, birthday, email, phone\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('firstName');\r",
									"pm.expect(target).to.have.property('lastName');\r",
									"pm.expect(target).to.have.property('patronymic');\r",
									"pm.expect(target).to.have.property('birthday');\r",
									"pm.expect(target).to.have.property('email');\r",
									"pm.expect(target).to.have.property('phone');\r",
									"});\r",
									"\r",
									"pm.test(\"id пользователя в ответе должен соответствовать id из запроса\", function () {\r",
									"    pm.expect(target.id).equal(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/profile/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить пользователя (userId == 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbjFAdGVzdC5ydSIsImV4cCI6MTczMDQ1NDM2NSwicm9sZXMiOlsiQURNSU4iLCJVU0VSIl0sImlkIjoxfQ.-FapavBJiHpSJbbYLFjqhUe5a8j2V4R3wQE5Bmx_62jyLv6GQCt3iq_AGspUB_8ETZ3b0q3DQz5uHPQwYf315w",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить пользователя (userId == 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbjFAdGVzdC5ydSIsImV4cCI6MTczMDQ1NDM2NSwicm9sZXMiOlsiQURNSU4iLCJVU0VSIl0sImlkIjoxfQ.-FapavBJiHpSJbbYLFjqhUe5a8j2V4R3wQE5Bmx_62jyLv6GQCt3iq_AGspUB_8ETZ3b0q3DQz5uHPQwYf315w",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Аутентификация пользователя (bad password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 401 и данные в формате json\", function () {\r",
									"    pm.response.to.be.unauthorized;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"admin1@test.ru\",\r\n  \"password\": \"dmin1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: type, accessToken, refreshToken\", function () {\r",
									"pm.expect(target).to.have.property('type');\r",
									"pm.expect(target).to.have.property('accessToken');\r",
									"pm.expect(target).to.have.property('refreshToken');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"admin1@test.ru\",\r\n  \"password\": \"admin1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение нового Access токена (bad token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
									"    pm.response.to.be.forbidden;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"refreshToken\": \"bad_token\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение нового Access токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: type, accessToken\", function () {\r",
									"pm.expect(target).to.have.property('type');\r",
									"pm.expect(target).to.have.property('accessToken');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"refreshToken\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbjFAdGVzdC5ydSIsImV4cCI6MTczMDQ1NTUxN30.5QKZrMg5v9CXyT6MWzKYhg-NxaZNlvDtB_qiFvcRyj9o3aGcmnVhP-xtVGxeuPVD1SZgHugn1fL12hBC9akxqA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление обоих токенов (bad token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
									"    pm.response.to.be.forbidden;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"refreshToken\": \"7777eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbjFAdGVzdC5ydSIsImV4cCI6MTczMDQ1NTUxN30.5QKZrMg5v9CXyT6MWzKYhg-NxaZNlvDtB_qiFvcRyj9o3aGcmnVhP-xtVGxeuPVD1SZgHugn1fL12hBC9akxqA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление обоих токенов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: type, accessToken, refreshToken\", function () {\r",
									"pm.expect(target).to.have.property('type');\r",
									"pm.expect(target).to.have.property('accessToken');\r",
									"pm.expect(target).to.have.property('refreshToken');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"refreshToken\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbjFAdGVzdC5ydSIsImV4cCI6MTczMDQ1NTUxN30.5QKZrMg5v9CXyT6MWzKYhg-NxaZNlvDtB_qiFvcRyj9o3aGcmnVhP-xtVGxeuPVD1SZgHugn1fL12hBC9akxqA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Role",
			"item": [
				{
					"name": "Получить список ролей (bad token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
									"    pm.response.to.be.forbidden;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGfciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbjFAdGVzdC5ydSIsImV4cCI6MTczMDQ1NDM2NSwicm9sZXMiOlsiQURNSU4iLCJVU0VSIl0sImlkIjoxfQ.-FapavBJiHpSJbbYLFjqhUe5a8j2V4R3wQE5Bmx_62jyLv6GQCt3iq_AGspUB_8ETZ3b0q3DQz5uHPQwYf315w",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список ролей",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, name\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено 3 роли.\", function () {\r",
									"    pm.expect(target.length).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbjFAdGVzdC5ydSIsImV4cCI6MTczMDQ1NDM2NSwicm9sZXMiOlsiQURNSU4iLCJVU0VSIl0sImlkIjoxfQ.-FapavBJiHpSJbbYLFjqhUe5a8j2V4R3wQE5Bmx_62jyLv6GQCt3iq_AGspUB_8ETZ3b0q3DQz5uHPQwYf315w",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить роль (roleId == 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbjFAdGVzdC5ydSIsImV4cCI6MTczMDQ1NDM2NSwicm9sZXMiOlsiQURNSU4iLCJVU0VSIl0sImlkIjoxfQ.-FapavBJiHpSJbbYLFjqhUe5a8j2V4R3wQE5Bmx_62jyLv6GQCt3iq_AGspUB_8ETZ3b0q3DQz5uHPQwYf315w",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roles/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить роль (roleId == 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbjFAdGVzdC5ydSIsImV4cCI6MTczMDQ1NDM2NSwicm9sZXMiOlsiQURNSU4iLCJVU0VSIl0sImlkIjoxfQ.-FapavBJiHpSJbbYLFjqhUe5a8j2V4R3wQE5Bmx_62jyLv6GQCt3iq_AGspUB_8ETZ3b0q3DQz5uHPQwYf315w",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roles/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles",
								"3"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}